// @hash v3-B58A1E59BDEA2A10FFDFD1AE980D1C72D5AAAFDD
// Automatically generated by ReactJS.NET. Do not edit, your changes will be overridden.
// Version: 3.4.0 (build 404f0dc) with Babel 6.7.7
// Generated at: 2/7/2020 12:35:28 PM
///////////////////////////////////////////////////////////////////////////////
var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

//內容穿插廣告

var ContentAd = function (_React$Component) {
    _inherits(ContentAd, _React$Component);

    function ContentAd(props) {
        _classCallCheck(this, ContentAd);

        var _this = _possibleConstructorReturn(this, Object.getPrototypeOf(ContentAd).call(this, props));

        _this.state = {
            content_ad: _this.props.content
        };
        return _this;
    } //原內容


    _createClass(ContentAd, [{
        key: "componentDidMount",
        value: function componentDidMount() {
            var $content = this.props.content;
            var $isMobile = isMobileDevice();
            var $linefeed = ""; //斷行符號

            if ($content.indexOf("\n") > -1) $linefeed = "\n";else if ($content.indexOf("</p>") > -1) $linefeed = "</p>";else if ($content.indexOf("<br>") > -1 || $content.indexOf("<br />") > -1) {
                $content = $content.Replace("<br>", "<br />");
                $linefeed = "<br />";
            }
            var $sections = $content.split($linefeed); //因斷行而產生的段落

            //內容要插入的預設DFP模板
            var $content_code = $isMobile ? "01.EBCNews_PAGE_inpage_M1" : "01.EBCNews_PAGE_InRead_W1";
            var $content_id = $isMobile ? "content_ad" : "div-gpt-ad-1542789449980-0";
            var $content_size = $isMobile ? "[[300, 250]]" : "[[1, 1],[970, 250], [970, 90], [640, 250],[640, 360], \"fluid\"]";
            //mobile版第一個有指定DFP
            var $mobile_first_code = "01.EBCNews_PAGE_M1";
            var $mobile_first_id = "div-gpt-ad-1565585364693-0";
            var $mobile_first_size = "[[300, 600], [1, 1], [300, 250], [336, 280]]";

            //廣告外框div
            var dfp_parent = $("<div></div>");
            dfp_parent.css("text-align", "center");
            dfp_parent.css("padding", "10px 0 20px 0");
            //廣告內框div
            var $dfp_child = $("<div></div>");
            $dfp_child.addClass("dfp_ad");
            $dfp_child.attr("id", $content_id);
            $dfp_child.attr("data-code", $content_code);
            $dfp_child.attr("data-size", $content_size);
            //取得內容要插入的DFP html
            var $dfp = dfp_parent.append($dfp_child).prop("outerHTML");

            var $img_caption = ["▲", "圖／"]; //圖片說明內含字
            var $end = ["今日最熱門"]; //結尾代表文字
            var $words = $isMobile ? 250 : 600; //間隔字數
            var $count = $words; //累積間隔字數
            var $finish = false;
            var $output = "",
                $temp = "",
                $next = "";
            var $adcount = 0;
            var $escape = false; //是否需要跳脫的行數
            var $block = false; //是否需要跳脫的區塊
            var $isImg = false; //是否為圖片的說明文字

            for (var i = 0; i < $sections.length; i++) {
                $output += $sections[i];
                //被當成分割陣列切掉的符號要加回來(若是最後一個就不需要加)
                if (i + 1 < $sections.length) $output += $linefeed;

                //未完成廣告插入作業
                if (!$finish) {
                    //<script><blockquote><iframe>區塊需整個跳開不列入計算
                    if ($sections[i].match(/(<(script|blockquote|iframe)[^>]*>).*(<\/(script|blockquote|iframe)>)/g)) $escape = true; //有頭有尾,只跳開這一行
                    else if ($sections[i].match(/<(script|blockquote|iframe)[^>]*>/g)) {
                            //只有頭,開始跳開區塊
                            $block = true;
                            $escape = true;
                        } else if ($sections[i].match(/<\/(script|blockquote|iframe)>/g)) {
                            //只有尾,結束跳開區塊
                            $block = false;
                            $escape = true;
                        } else if (!$block) $escape = false;

                    //仍有下一段落且不是需要跳開的(避免是最後一段又插入內容)
                    if (!$escape && i + 1 < $sections.length) {
                        $temp += removeHTML($sections[i]); //去除html後的累積字集
                        $next = removeHTML($sections[i + 1]); //去除html的下段文字

                        //下段文字含有純文字的內容
                        if ($next.length > 0) {
                            //下一段內容含有結尾代表文字時,不再插入廣告內容
                            $finish = matchArray($next, $end);

                            if (!$finish) {
                                //下段文字是否含有圖片說明
                                $isImg = matchArray($next, $img_caption);

                                //不是圖片說明,且超過間隔字數
                                if (!$isImg && $temp.length >= $count) {
                                    if ($isMobile) {
                                        //mobile版需要多次插入廣告
                                        ++$adcount;
                                        if ($adcount == 1) //第一個插入特定DFP
                                            $output += $dfp.replace($content_id, $mobile_first_id).replace($content_code, $mobile_first_code).replace($content_size, $mobile_first_size);else $output += $dfp.replace($content_id, $content_id + $adcount);

                                        //下次間隔總字數
                                        $count += $words;
                                    } else {
                                        $output += $dfp;
                                        $finish = true;
                                    }
                                }
                            }
                        }
                    }
                }
            }
            this.setState(function (prevState) {
                return { content_ad: $output };
            });
        }
    }, {
        key: "render",
        value: function render() {
            return React.createElement("span", { dangerouslySetInnerHTML: { __html: this.state.content_ad } });
        }
    }]);

    return ContentAd;
}(React.Component);

ContentAd.defaultProps = {
    content: '' };
ContentAd.propTypes = {
    content: PropTypes.string
};